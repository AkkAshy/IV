from django import forms
from django.contrib.auth.forms import UserCreationForm
from inventory.models import Equipment, ContractDocument, EquipmentType, ComputerDetails, MovementHistory
from university.models import University, Building, Faculty, Floor, Room
from user.models import User
from django.utils import timezone




class EquipmentForm(forms.ModelForm):
    cpu = forms.CharField(max_length=255, required=False, label='–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä', widget=forms.TextInput(attrs={'class': 'form-control computer-field'}))
    ram = forms.CharField(max_length=255, required=False, label='–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å', widget=forms.TextInput(attrs={'class': 'form-control computer-field'}))
    storage = forms.CharField(max_length=255, required=False, label='–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å', widget=forms.TextInput(attrs={'class': 'form-control computer-field'}))
    has_keyboard = forms.BooleanField(required=False, label='–ï—Å—Ç—å –ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞', widget=forms.CheckboxInput(attrs={'class': 'form-check-input computer-field'}))
    has_mouse = forms.BooleanField(required=False, label='–ï—Å—Ç—å –ª–∏ –º—ã—à—å', widget=forms.CheckboxInput(attrs={'class': 'form-check-input computer-field'}))
    monitor_size = forms.CharField(max_length=50, required=False, label='–†–∞–∑–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞', widget=forms.TextInput(attrs={'class': 'form-control computer-field'}))

    class Meta:
        model = Equipment
        fields = ['type', 'room', 'name', 'photo', 'description', 'is_active', 'inn', 'contract']
        labels = {
            'type': '–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
            'room': '–ö–∞–±–∏–Ω–µ—Ç',
            'name': '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
            'photo': '–§–æ—Ç–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
            'is_active': '–ê–∫—Ç–∏–≤–Ω–æ',
            'inn': '–ò–ù–ù',
            'contract': '–î–æ–≥–æ–≤–æ—Ä',
        }
        widgets = {
            'type': forms.Select(attrs={'class': 'form-control', 'id': 'id_type'}),
            'room': forms.Select(attrs={'class': 'form-control'}),
            'name': forms.TextInput(attrs={'class': 'form-control'}),
            'photo': forms.FileInput(attrs={'class': 'form-control'}),
            'description': forms.Textarea(attrs={'class': 'form-control', 'rows': 4}),
            'is_active': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
            'inn': forms.TextInput(attrs={'class': 'form-control'}),
            'contract': forms.Select(attrs={'class': 'form-control'}),
        }

    def __init__(self, *args, **kwargs):
        print(f"EquipmentForm init: args={args}, kwargs={kwargs}")
        super().__init__(*args, **kwargs)
        if self.instance and self.instance.pk and hasattr(self.instance, 'computer_details') and self.instance.computer_details:
            try:
                computer_details = self.instance.computer_details
                print(f"Found computer_details: {computer_details}")
                self.fields['cpu'].initial = computer_details.cpu
                self.fields['ram'].initial = computer_details.ram
                self.fields['storage'].initial = computer_details.storage
                self.fields['has_keyboard'].initial = computer_details.has_keyboard
                self.fields['has_mouse'].initial = computer_details.has_mouse
                self.fields['monitor_size'].initial = computer_details.monitor_size
            except Exception as e:
                print(f"Error accessing computer_details: {e}")

    def clean(self):
        cleaned_data = super().clean()
        print(f"EquipmentForm clean: cleaned_data={cleaned_data}")
        return cleaned_data

    def save(self, commit=True):
        print(f"EquipmentForm save: cleaned_data={self.cleaned_data}")
        equipment = super().save(commit=False)
        print(f"Saving equipment: {equipment}")
        if commit:
            try:
                equipment.save()
                print("Equipment saved successfully")
                if any(self.cleaned_data.get(field) for field in ['cpu', 'ram', 'storage', 'has_keyboard', 'has_mouse', 'monitor_size']):
                    print("Saving ComputerDetails")
                    computer_details, created = ComputerDetails.objects.get_or_create(equipment=equipment)
                    computer_details.cpu = self.cleaned_data['cpu']
                    computer_details.ram = self.cleaned_data['ram']
                    computer_details.storage = self.cleaned_data['storage']
                    computer_details.has_keyboard = self.cleaned_data['has_keyboard']
                    computer_details.has_mouse = self.cleaned_data['has_mouse']
                    computer_details.monitor_size = self.cleaned_data['monitor_size']
                    computer_details.save()
                    print("ComputerDetails saved successfully")
            except Exception as e:
                print(f"Error saving equipment or ComputerDetails: {e}")
                raise
        return equipment


# üìÑ –î–æ–≥–æ–≤–æ—Ä
class ContractDocumentForm(forms.ModelForm):
    class Meta:
        model = ContractDocument
        fields = ['number', 'file', 'valid_until']

# üéì –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç
class UniversityForm(forms.ModelForm):
    class Meta:
        model = University
        fields = ['name', 'address', 'logo']
        labels = {
            'name': '–ù–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞',
            'address': '–ê–¥—Ä–µ—Å',
            'logo': '–õ–æ–≥–æ—Ç–∏–ø',
        }
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control'}),
            'address': forms.Textarea(attrs={'class': 'form-control', 'rows': 4}),
            'logo': forms.FileInput(attrs={'class': 'form-control'}),
        }


# üè¢ –ó–¥–∞–Ω–∏–µ
class BuildingForm(forms.ModelForm):
    class Meta:
        model = Building
        fields = ['university', 'name', 'address', 'photo']
        labels = {
            'university': '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç',
            'name': '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–ø—É—Å–∞',
            'address': '–ê–¥—Ä–µ—Å –∫–æ—Ä–ø—É—Å–∞',
            'photo': '–§–æ—Ç–æ –∫–æ—Ä–ø—É—Å–∞',
        }
        widgets = {
            'university': forms.Select(attrs={'class': 'form-control'}),
            'name': forms.TextInput(attrs={'class': 'form-control'}),
            'address': forms.Textarea(attrs={'class': 'form-control', 'rows': 4}),
            'photo': forms.FileInput(attrs={'class': 'form-control'}),
        }

# üß™ –§–∞–∫—É–ª—å—Ç–µ—Ç
class FacultyForm(forms.ModelForm):
    class Meta:
        model = Faculty
        fields = ['building', 'floor', 'name', 'photo']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # –ó–∞–¥–∞–µ–º –ø—É—Å—Ç–æ–π queryset –¥–ª—è —ç—Ç–∞–∂–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.fields['floor'].queryset = Floor.objects.none()

        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (POST –∑–∞–ø—Ä–æ—Å)
        if 'building' in self.data:
            try:
                building_id = int(self.data.get('building'))
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º queryset –¥–ª—è —ç—Ç–∞–∂–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞
                self.fields['floor'].queryset = Floor.objects.filter(building_id=building_id)
            except (ValueError, TypeError):
                pass
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        elif self.instance.pk and self.instance.building:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º queryset –¥–ª—è —ç—Ç–∞–∂–µ–π –∫–æ—Ä–ø—É—Å–∞ –æ–±—ä–µ–∫—Ç–∞
            self.fields['floor'].queryset = Floor.objects.filter(building=self.instance.building)

    def clean(self):
        cleaned_data = super().clean()
        building = cleaned_data.get('building')
        floor = cleaned_data.get('floor')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç—Ç–∞–∂ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–æ—Ä–ø—É—Å—É
        if building and floor and floor.building != building:
            self.add_error('floor', '–í—ã–±—Ä–∞–Ω–Ω—ã–π —ç—Ç–∞–∂ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–æ—Ä–ø—É—Å—É')

        return cleaned_data

# ü™ú –≠—Ç–∞–∂
class FloorForm(forms.ModelForm):
    class Meta:
        model = Floor
        fields = ['building', 'number', 'description']

# üß≠ –ö–æ–º–Ω–∞—Ç–∞
class RoomForm(forms.ModelForm):
    class Meta:
        model = Room
        fields = ['floor', 'number', 'name', 'is_special', 'building', 'photo']
        labels = {
            'floor': '–≠—Ç–∞–∂',
            'number': '–ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã',
            'name': '–ù–∞–∑–≤–∞–Ω–∏–µ',
            'is_special': '–û—Å–æ–±—ã–π –∫–∞–±–∏–Ω–µ—Ç',
            'building': '–ó–¥–∞–Ω–∏–µ',
            'photo': '–§–æ—Ç–æ',
        }
        widgets = {
            'floor': forms.Select(attrs={'class': 'form-control'}),
            'number': forms.TextInput(attrs={'class': 'form-control'}),
            'name': forms.TextInput(attrs={'class': 'form-control'}),
            'is_special': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
            'building': forms.Select(attrs={'class': 'form-control'}),
            'photo': forms.FileInput(attrs={'class': 'form-control'}),
        }

    def clean(self):
        cleaned_data = super().clean()
        building = cleaned_data.get('building')
        floor = cleaned_data.get('floor')
        if not building:
            raise forms.ValidationError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ.")
        if not floor:
            raise forms.ValidationError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂.")
        return cleaned_data


# üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
class UserForm(UserCreationForm):
    class Meta:
        model = User
        fields = [
            'username', 'first_name', 'last_name',
            'email', 'phone_number', 'role',
            'profile_picture', 'password1', 'password2'
        ]

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if self.instance and self.instance.pk:
            self.fields.pop('password1')
            self.fields.pop('password2')

    def save(self, commit=True):
        user = super().save(commit=False)
        if commit:
            user.save()
        return user

    class Meta:
        model = User
        fields = ['username', 'first_name', 'last_name', 'email', 'phone_number', 'role', 'profile_picture']


class MovementForm(forms.ModelForm):
    class Meta:
        model = MovementHistory
        fields = ['equipment', 'from_room', 'to_room', 'note']




    def clean(self):
        cleaned_data = super().clean()
        from_room = cleaned_data.get('from_room')
        to_room = cleaned_data.get('to_room')

        if from_room == to_room:
            raise forms.ValidationError("–ö–æ–º–Ω–∞—Ç—ã '–æ—Ç–∫—É–¥–∞' –∏ '–∫—É–¥–∞' –Ω–µ –º–æ–≥—É—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å.")

        return cleaned_data

    def save(self, commit=True):
        movement = super().save(commit=False)
        equipment = movement.equipment

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        equipment.room = movement.to_room
        if commit:
            equipment.save()
            movement.save()
        return movement


class EquipmentTypeForm(forms.ModelForm):
    class Meta:
        model = EquipmentType
        fields = ['name']
        labels = {
            'name': '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
        }
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control'}),
        }